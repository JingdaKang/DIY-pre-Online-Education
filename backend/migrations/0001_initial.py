# Generated by Django 2.2 on 2020-06-07 07:32

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_avatar', models.ImageField(blank=True, default='avatar/default.png', null=True, upload_to='avatar/', verbose_name='头像')),
                ('user_gender', models.CharField(choices=[('M', '男'), ('F', '女'), ('D', '未知')], default='D', max_length=20, verbose_name='性别')),
                ('user_bir', models.DateField(blank=True, null=True, verbose_name='出生日期')),
                ('user_edu', models.TextField(blank=True, null=True, verbose_name='学历信息')),
                ('user_addr', models.TextField(blank=True, null=True, verbose_name='籍贯')),
                ('user_tel', models.CharField(blank=True, max_length=20, null=True, verbose_name='手机号')),
                ('type', models.CharField(choices=[('T', '教师'), ('S', '学生'), ('A', '管理员')], default='S', max_length=20, verbose_name='账户类型')),
                ('user_reg', models.DateField(default=datetime.date.today, verbose_name='用户注册时间')),
                ('score', models.IntegerField(default=0, verbose_name='积分')),
                ('user_status', models.BooleanField(default=True, verbose_name='发帖')),
                ('user_following_num', models.IntegerField(default=0, verbose_name='关注数')),
                ('user_follower_num', models.IntegerField(default=0, verbose_name='粉丝数')),
                ('user_credit', models.IntegerField(default=0, verbose_name='贡献度')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Blank',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('content', models.TextField(verbose_name='题干')),
                ('answer', models.CharField(blank=True, max_length=100, null=True, verbose_name='答案')),
                ('wid', models.IntegerField(verbose_name='作业编号')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='questionpic/', verbose_name='题目图片')),
                ('explain', models.TextField(blank=True, null=True, verbose_name='解释')),
            ],
            options={
                'verbose_name': '作业填空',
                'verbose_name_plural': '作业填空',
                'db_table': 'blank',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='课程编号')),
                ('name', models.CharField(max_length=30, verbose_name='课程名')),
                ('credit', models.FloatField(verbose_name='学分')),
                ('number', models.IntegerField(default=0, verbose_name='选课人数')),
                ('maxnum', models.IntegerField(default=0, verbose_name='最大人数')),
                ('tname', models.CharField(max_length=20, verbose_name='教师姓名')),
                ('type', models.CharField(choices=[('MR', '专业必修'), ('ME', '专业选修'), ('PR', '公共必修'), ('PE', '公共选修')], default='MR', max_length=20, verbose_name='课程类型')),
                ('year', models.IntegerField(default=2020, verbose_name='学年')),
                ('semester', models.CharField(choices=[('1', '1'), ('2', '2')], default='1', max_length=20, verbose_name='学期')),
                ('tid', models.IntegerField(verbose_name='教师id')),
            ],
            options={
                'verbose_name': '作业课程',
                'verbose_name_plural': '作业课程',
                'db_table': 'course',
            },
        ),
        migrations.CreateModel(
            name='Discuss',
            fields=[
                ('discuss_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='小组讨论id')),
                ('discuss_title', models.CharField(max_length=100, verbose_name='讨论贴标题')),
                ('discuss_click_num', models.IntegerField(default=0, verbose_name='点击数')),
                ('discuss_reply_num', models.IntegerField(default=0, verbose_name='回复数')),
                ('discuss_hot_num', models.IntegerField(default=0, verbose_name='热度')),
                ('discuss_time', models.DateTimeField(verbose_name='发布时间')),
                ('discuss_reply_time', models.DateTimeField(verbose_name='最后回复时间')),
                ('discuss_content', models.TextField(default='', verbose_name='内容')),
                ('discuss_content_file_check', models.BooleanField(default=False, verbose_name='是否包含附件')),
            ],
            options={
                'verbose_name': '论坛小组讨论贴',
                'verbose_name_plural': '论坛小组讨论贴',
                'db_table': 'forum_discuss',
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='1', max_length=50, verbose_name='考试名称')),
                ('start_time', models.DateTimeField(verbose_name='开始时间')),
                ('end_time', models.DateTimeField(verbose_name='截止时间')),
                ('status', models.CharField(choices=[('0', '未开始'), ('1', '进行中'), ('2', '已结束')], default='0', max_length=10, verbose_name='考试状态')),
            ],
            options={
                'verbose_name': '考试信息',
                'verbose_name_plural': '考试信息',
                'db_table': 'exam',
            },
        ),
        migrations.CreateModel(
            name='ExamCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='课程名')),
                ('stime', models.DateField(null=True, verbose_name='开始日期')),
                ('time', models.IntegerField(default=0, verbose_name='课时')),
                ('maxnum', models.IntegerField(default=20, verbose_name='最大人数')),
                ('number', models.IntegerField(default=0, verbose_name='当前人数')),
                ('status', models.IntegerField(default=1, verbose_name='状态')),
                ('tid', models.ForeignKey(db_column='tid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '考试课程',
                'verbose_name_plural': '考试课程',
                'db_table': 'exam_course',
            },
        ),
        migrations.CreateModel(
            name='ExamPaper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='标题')),
                ('qidlist', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), size=None, verbose_name='试题列表')),
                ('cid', models.ForeignKey(db_column='cid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamCourse')),
                ('tid', models.ForeignKey(db_column='tid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '考试试卷信息',
                'verbose_name_plural': '考试试卷信息',
                'db_table': 'exam_paper',
            },
        ),
        migrations.CreateModel(
            name='ExamQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('1', '单选'), ('2', '多选'), ('3', '填空'), ('4', '判断'), ('5', '主观')], max_length=10, verbose_name='题目类型')),
                ('chapter', models.CharField(max_length=2, verbose_name='章')),
                ('section', models.CharField(max_length=2, verbose_name='节')),
                ('count', models.IntegerField(verbose_name='难度系数')),
                ('cid', models.ForeignKey(db_column='cid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamCourse')),
                ('tid', models.ForeignKey(db_column='tid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '考试题目',
                'verbose_name_plural': '考试题目',
                'db_table': 'exam_question',
            },
        ),
        migrations.CreateModel(
            name='ForumFile',
            fields=[
                ('file_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='文件id')),
                ('file_name', models.CharField(max_length=100, verbose_name='文件名')),
                ('file_url', models.FileField(default='file/null.txt', upload_to='file/', verbose_name='地址')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='上传用户id')),
            ],
            options={
                'verbose_name': '论坛文件',
                'verbose_name_plural': '论坛文件',
                'db_table': 'forum_file',
            },
        ),
        migrations.CreateModel(
            name='GoodWork',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('wid', models.IntegerField(verbose_name='作业编号')),
                ('cid', models.IntegerField(verbose_name='课程编号')),
                ('qid', models.IntegerField(verbose_name='主观题目编号')),
                ('tid', models.IntegerField(verbose_name='教师id')),
                ('sid', models.IntegerField(verbose_name='学生id')),
                ('answer', models.TextField(verbose_name='学生解答')),
                ('upload_time', models.DateField(blank=True, null=True, verbose_name='上传时间')),
                ('is_read', models.BooleanField(default=False, verbose_name='是否被读取')),
            ],
            options={
                'verbose_name': '优秀作业',
                'verbose_name_plural': '优秀作业',
                'db_table': 'goodwork',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='小组id')),
                ('group_name', models.CharField(max_length=100, unique=True, verbose_name='小组名')),
                ('group_owner_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='小组长')),
            ],
            options={
                'verbose_name': '论坛小组',
                'verbose_name_plural': '论坛小组',
                'db_table': 'forum_group',
            },
        ),
        migrations.CreateModel(
            name='Judge',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('content', models.TextField(verbose_name='题干')),
                ('answer', models.BooleanField(default=False, verbose_name='答案')),
                ('wid', models.IntegerField(verbose_name='作业编号')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='questionpic/', verbose_name='题目图片')),
                ('explain', models.TextField(blank=True, null=True, verbose_name='解释')),
            ],
            options={
                'verbose_name': '作业判断',
                'verbose_name_plural': '作业判断',
                'db_table': 'judge',
            },
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('major_id', models.AutoField(primary_key=True, serialize=False, verbose_name='专业编号')),
                ('major_name', models.CharField(max_length=15, verbose_name='专业类型')),
            ],
            options={
                'verbose_name': '智能问答专业',
                'verbose_name_plural': '智能问答专业',
                'db_table': 'major',
            },
        ),
        migrations.CreateModel(
            name='Multiple',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('content', models.TextField(verbose_name='题干')),
                ('choice1', models.CharField(max_length=100, verbose_name='选项1')),
                ('choice2', models.CharField(max_length=100, verbose_name='选项2')),
                ('choice3', models.CharField(max_length=100, verbose_name='选项3')),
                ('choice4', models.CharField(max_length=100, verbose_name='选项4')),
                ('answer', models.CharField(default='A', max_length=4, verbose_name='答案1')),
                ('wid', models.IntegerField(verbose_name='作业编号')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='questionpic/', verbose_name='题目图片')),
                ('explain', models.TextField(blank=True, null=True, verbose_name='解释')),
            ],
            options={
                'verbose_name': '作业多选',
                'verbose_name_plural': '作业多选',
                'db_table': 'mutiple',
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_title', models.CharField(max_length=30)),
                ('note_text', models.TextField()),
                ('note_type', models.CharField(default='markdown', max_length=10)),
                ('note_create', models.DateTimeField(auto_now_add=True)),
                ('note_modify', models.DateTimeField(auto_now=True)),
                ('note_delete', models.DateTimeField(blank=True, null=True)),
                ('is_delete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('locked_by', models.ForeignKey(blank=True, db_column='locked_by', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('modifier_id', models.ForeignKey(blank=True, db_column='modifier_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifier_note', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '云笔记笔记',
                'db_table': 'tb_note',
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('request_id', models.AutoField(primary_key=True, serialize=False, verbose_name='需求编号')),
                ('context', models.CharField(max_length=60, verbose_name='需求内容')),
                ('status', models.IntegerField(verbose_name='状态')),
                ('number', models.IntegerField(default=0, verbose_name='回答数')),
                ('stime', models.DateTimeField(verbose_name='发布时间')),
                ('etime', models.DateTimeField(null=True, verbose_name='截止时间')),
                ('score', models.IntegerField(verbose_name='悬赏积分')),
            ],
            options={
                'verbose_name': '智能问答需求',
                'verbose_name_plural': '智能问答需求',
                'db_table': 'request',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('section_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='分区id')),
                ('section_name', models.CharField(max_length=100, unique=True, verbose_name='分区名')),
            ],
            options={
                'verbose_name': '论坛分区',
                'verbose_name_plural': '论坛分区',
                'db_table': 'forum_section',
            },
        ),
        migrations.CreateModel(
            name='Share_File',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('data_name', models.CharField(max_length=30, verbose_name='资料名')),
                ('data_file', models.FileField(upload_to='Share/', verbose_name='资料')),
                ('upload_id', models.IntegerField(verbose_name='上传者id')),
                ('update_time', models.DateTimeField(blank=True, null=True, verbose_name='上传时间')),
                ('aid', models.IntegerField(default=0, verbose_name='所属共享区编号')),
            ],
            options={
                'verbose_name': '作业共享资料',
                'verbose_name_plural': '作业共享资料',
                'db_table': 'share_file',
            },
        ),
        migrations.CreateModel(
            name='SharedArea',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('cid', models.IntegerField(verbose_name='所属课程编号')),
                ('admin_id', models.IntegerField(blank=True, null=True, verbose_name='管理员id')),
            ],
            options={
                'verbose_name': '作业共享区',
                'verbose_name_plural': '作业共享区',
                'db_table': 'sharedarea',
            },
        ),
        migrations.CreateModel(
            name='Simple',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('content', models.TextField(verbose_name='题干')),
                ('choice1', models.CharField(max_length=100, verbose_name='选项1')),
                ('choice2', models.CharField(max_length=100, verbose_name='选项2')),
                ('choice3', models.CharField(max_length=100, verbose_name='选项3')),
                ('choice4', models.CharField(max_length=100, verbose_name='选项4')),
                ('answer', models.CharField(default='A', max_length=1, verbose_name='答案')),
                ('wid', models.IntegerField(verbose_name='作业编号')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='questionpic/', verbose_name='题目图片')),
                ('explain', models.TextField(blank=True, null=True, verbose_name='解释')),
            ],
            options={
                'verbose_name': '作业单选',
                'verbose_name_plural': '作业单选',
                'db_table': 'simple',
            },
        ),
        migrations.CreateModel(
            name='Subjective',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('content', models.TextField(verbose_name='题干')),
                ('answer', models.TextField(blank=True, null=True, verbose_name='答案')),
                ('wid', models.IntegerField(verbose_name='作业编号')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='questionpic/', verbose_name='题目图片')),
                ('explain', models.TextField(blank=True, null=True, verbose_name='解释')),
            ],
            options={
                'verbose_name': '作业主观题',
                'verbose_name_plural': '作业主观题',
                'db_table': 'subjective',
            },
        ),
        migrations.CreateModel(
            name='User_Course',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('sname', models.CharField(max_length=150, verbose_name='学生用户名')),
                ('cid', models.IntegerField(verbose_name='所属课程编号')),
            ],
            options={
                'verbose_name': '作业学生课程关联',
                'verbose_name_plural': '作业学生课程关联',
                'db_table': 'user_course',
            },
        ),
        migrations.CreateModel(
            name='User_Question',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('sid', models.IntegerField(verbose_name='学生编号')),
                ('wid', models.IntegerField(default=0, verbose_name='作业编号')),
                ('qid', models.IntegerField(default=0, verbose_name='题目编号')),
                ('number', models.IntegerField(default=0, verbose_name='作业内序号')),
                ('answer', models.TextField(blank=True, null=True, verbose_name='学生答案')),
                ('ischeck', models.BooleanField(default=False, verbose_name='是否已经批改')),
                ('judge', models.BooleanField(default=False, verbose_name='正误')),
                ('cloud', models.BooleanField(default=False, verbose_name='上传云笔记')),
                ('type', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5')], max_length=1, verbose_name='题目类型')),
                ('upload_time', models.DateField(blank=True, null=True, verbose_name='上传时间')),
                ('is_read', models.BooleanField(default=False, verbose_name='是否被读取')),
            ],
            options={
                'verbose_name': '作业学生题目',
                'verbose_name_plural': '作业学生题目',
                'db_table': 'user_question',
            },
        ),
        migrations.CreateModel(
            name='User_Work',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('wid', models.IntegerField(verbose_name='作业编号')),
                ('sid', models.IntegerField(verbose_name='学生编号')),
                ('update', models.DateTimeField(auto_now=True, verbose_name='上传时间')),
                ('file', models.FileField(blank=True, null=True, upload_to='work/', verbose_name='作业')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='评语')),
                ('score', models.IntegerField(default=0, verbose_name='评分')),
                ('good', models.BooleanField(default=False, verbose_name='是否优秀作业')),
                ('finish', models.BooleanField(default=False, verbose_name='是否完成')),
                ('ifscore', models.BooleanField(default=False, verbose_name='是否已评分')),
            ],
            options={
                'verbose_name': '学生作业',
                'verbose_name_plural': '学生作业',
                'db_table': 'user_work',
            },
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('cid', models.IntegerField(verbose_name='所属课程编号')),
                ('ctime', models.IntegerField(verbose_name='作业次数')),
                ('chapter', models.IntegerField(verbose_name='所属章节')),
                ('deadline', models.DateTimeField(auto_now_add=True, verbose_name='截止时间')),
                ('release', models.BooleanField(default=False, verbose_name='是否发布')),
                ('finishnum', models.IntegerField(default=0, verbose_name='已完成人数')),
                ('qnum', models.IntegerField(default=0, verbose_name='包含题目数')),
            ],
            options={
                'verbose_name': '作业',
                'verbose_name_plural': '作业',
                'db_table': 'work',
            },
        ),
        migrations.CreateModel(
            name='Work_Message',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('tid', models.IntegerField(verbose_name='发送人id')),
                ('sid', models.IntegerField(verbose_name='接收人id')),
                ('tittle', models.TextField(verbose_name='消息标题')),
                ('message', models.TextField(verbose_name='消息')),
                ('read', models.BooleanField(default=False, verbose_name='已读')),
            ],
            options={
                'verbose_name': '作业消息',
                'verbose_name_plural': '作业消息',
                'db_table': 'work_message',
            },
        ),
        migrations.CreateModel(
            name='Work_Question',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='流水号')),
                ('wid', models.IntegerField(verbose_name='作业编号')),
                ('qid', models.IntegerField(verbose_name='题目编号')),
                ('number', models.IntegerField(default=0, verbose_name='作业内序号')),
                ('type', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5')], max_length=1, verbose_name='题目类型')),
            ],
            options={
                'verbose_name': '作业题目',
                'verbose_name_plural': '作业题目',
                'db_table': 'work_question',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('topic_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='主题id')),
                ('topic_title', models.CharField(max_length=100, verbose_name='贴子标题')),
                ('topic_click_num', models.IntegerField(default=0, verbose_name='点击数')),
                ('topic_reply_num', models.IntegerField(default=0, verbose_name='回复数')),
                ('topic_collect_num', models.IntegerField(default=0, verbose_name='收藏数')),
                ('topic_like_num', models.IntegerField(default=0, verbose_name='点赞数')),
                ('topic_hot_num', models.IntegerField(default=0, verbose_name='热度')),
                ('topic_time', models.DateTimeField(verbose_name='发帖时间')),
                ('topic_reply_time', models.DateTimeField(verbose_name='最后回帖时间')),
                ('topic_content', models.TextField(default='', verbose_name='内容')),
                ('topic_content_file_check', models.BooleanField(default=False, verbose_name='是否包含附件')),
                ('file_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.ForumFile', verbose_name='附件id')),
                ('section_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Section', verbose_name='归属分区')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='发帖用户')),
            ],
            options={
                'verbose_name': '论坛主题',
                'verbose_name_plural': '论坛主题',
                'db_table': 'forum_topic',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(max_length=30)),
                ('team_desc', models.TextField(blank=True, null=True)),
                ('team_create', models.DateTimeField(auto_now_add=True)),
                ('team_modify', models.DateTimeField(auto_now=True)),
                ('leader_id', models.ForeignKey(db_column='leader_id', on_delete=django.db.models.deletion.CASCADE, related_name='leader_team', to=settings.AUTH_USER_MODEL)),
                ('locked_by', models.ForeignKey(blank=True, db_column='locked_by', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(related_name='member_team', to=settings.AUTH_USER_MODEL)),
                ('modifier_id', models.ForeignKey(blank=True, db_column='modifier_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifier_team', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '云笔记团队',
                'db_table': 'tb_team',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(max_length=20)),
                ('tag_create', models.DateTimeField(auto_now_add=True)),
                ('creator_id', models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '云笔记标签',
                'db_table': 'tb_tag',
                'unique_together': {('tag_name', 'creator_id')},
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('subject_id', models.AutoField(primary_key=True, serialize=False, verbose_name='课程编号')),
                ('subject_name', models.CharField(max_length=15, verbose_name='课程类型')),
                ('major', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Major', verbose_name='专业')),
            ],
            options={
                'verbose_name': '智能问答课程',
                'verbose_name_plural': '智能问答课程',
                'db_table': 'subject',
            },
        ),
        migrations.CreateModel(
            name='StudentChooseCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(default=1, verbose_name='选课状态')),
                ('cid', models.ForeignKey(db_column='cid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamCourse')),
                ('uid', models.ForeignKey(db_column='uid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '考试学生选课',
                'verbose_name_plural': '考试学生选课',
                'db_table': 'student_c_course',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('resource_id', models.AutoField(primary_key=True, serialize=False, verbose_name='资源编号')),
                ('time', models.DateTimeField(verbose_name='上传时间')),
                ('location', models.CharField(max_length=60, verbose_name='地址')),
                ('score', models.IntegerField(verbose_name='评分')),
                ('number', models.IntegerField(verbose_name='下载次数')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Request', verbose_name='需求')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '智能问答资源',
                'verbose_name_plural': '智能问答资源',
                'db_table': 'resource',
            },
        ),
        migrations.AddField(
            model_name='request',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Subject', verbose_name='科目'),
        ),
        migrations.AddField(
            model_name='request',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('reply_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='回复id')),
                ('reply_content', models.TextField(verbose_name='回复内容')),
                ('reply_time', models.DateTimeField(verbose_name='回帖时间')),
                ('reply_like_num', models.IntegerField(default=0, verbose_name='点赞数')),
                ('reply_topic_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Topic', verbose_name='回复主贴')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='回复用户')),
            ],
            options={
                'verbose_name': '论坛回复',
                'verbose_name_plural': '论坛回复',
                'db_table': 'forum_reply',
            },
        ),
        migrations.CreateModel(
            name='QuestionToTopic',
            fields=[
                ('question_topic_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='问题对应帖子记录ID')),
                ('question_id', models.IntegerField(verbose_name='对应问题ID')),
                ('topic_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Topic', verbose_name='对应帖子ID')),
            ],
            options={
                'verbose_name': '论坛问题贴对应表',
                'verbose_name_plural': '论坛问题贴对应表',
                'db_table': 'forum_question',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.AutoField(primary_key=True, serialize=False, verbose_name='问题编号')),
                ('context', models.CharField(max_length=60, verbose_name='问题内容')),
                ('status', models.IntegerField(verbose_name='状态')),
                ('number', models.IntegerField(default=0, verbose_name='回答数')),
                ('stime', models.DateTimeField(verbose_name='发布时间')),
                ('etime', models.DateTimeField(null=True, verbose_name='截止时间')),
                ('score', models.IntegerField(verbose_name='悬赏积分')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Subject', verbose_name='科目')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '智能问答问题',
                'verbose_name_plural': '智能问答问题',
                'db_table': 'question',
            },
        ),
        migrations.CreateModel(
            name='Operate_Class',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('J', '加入'), ('O', '退出')], max_length=20, verbose_name='申请类型')),
                ('time', models.DateTimeField(verbose_name='申请时间')),
                ('etime', models.DateTimeField(verbose_name='处理时间')),
                ('status', models.IntegerField(default=1, verbose_name='状态')),
                ('class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.ExamCourse', verbose_name='课程id')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='学生id')),
            ],
            options={
                'verbose_name': '课程操作',
                'verbose_name_plural': '课程操作',
                'db_table': 'operate_class',
            },
        ),
        migrations.CreateModel(
            name='NoteTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.ForeignKey(db_column='note', on_delete=django.db.models.deletion.CASCADE, to='backend.Note')),
                ('t', models.ForeignKey(db_column='tag', on_delete=django.db.models.deletion.CASCADE, to='backend.Tag')),
            ],
            options={
                'verbose_name': '云笔记标签笔记关联',
                'db_table': 'note_tag_relationship',
                'unique_together': {('note', 't')},
            },
        ),
        migrations.CreateModel(
            name='NoteBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notebook_name', models.CharField(max_length=50)),
                ('notebook_create', models.DateTimeField(auto_now_add=True)),
                ('notebook_modify', models.DateTimeField(auto_now=True)),
                ('creator_id', models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, related_name='creator_notebook', to=settings.AUTH_USER_MODEL)),
                ('locked_by', models.ForeignKey(blank=True, db_column='locked_by', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('modifier_id', models.ForeignKey(blank=True, db_column='modifier_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifier_notebook', to=settings.AUTH_USER_MODEL)),
                ('team_id', models.ForeignKey(blank=True, db_column='team_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notebooks', to='backend.Team')),
            ],
            options={
                'verbose_name': '云笔记笔记本',
                'db_table': 'tb_notebook',
            },
        ),
        migrations.AddField(
            model_name='note',
            name='notebook_id',
            field=models.ForeignKey(db_column='notebook_id', on_delete=django.db.models.deletion.CASCADE, related_name='notebook_note', to='backend.NoteBook'),
        ),
        migrations.AddField(
            model_name='note',
            name='tags',
            field=models.ManyToManyField(through='backend.NoteTag', to='backend.Tag'),
        ),
        migrations.AddField(
            model_name='note',
            name='team_id',
            field=models.ForeignKey(blank=True, db_column='team_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notes', to='backend.Team'),
        ),
        migrations.AddField(
            model_name='note',
            name='writer_id',
            field=models.ForeignKey(db_column='writer_id', on_delete=django.db.models.deletion.CASCADE, related_name='creator_note', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('message_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='消息ID')),
                ('message_read', models.BooleanField(default=False, verbose_name='是否已读')),
                ('message_related_type', models.IntegerField(default=0, verbose_name='相关类型，帖子为1，小组讨论为2')),
                ('message_related_id', models.IntegerField(blank=True, null=True, verbose_name='对应帖子或讨论id')),
                ('message_content', models.TextField(verbose_name='内容')),
                ('message_time', models.DateTimeField(default=datetime.datetime(2020, 6, 7, 15, 32, 33, 729334), verbose_name='消息发送时间')),
                ('message_receive_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receive_user', to=settings.AUTH_USER_MODEL, verbose_name='接收用户ID')),
                ('message_send_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='send_user', to=settings.AUTH_USER_MODEL, verbose_name='发送用户ID')),
            ],
            options={
                'verbose_name': '论坛消息',
                'verbose_name_plural': '论坛消息',
                'db_table': 'forum_message',
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('like_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='点赞记录ID')),
                ('like_type', models.IntegerField(verbose_name='类型，主贴为1，回帖为2')),
                ('like_content_id', models.IntegerField(verbose_name='点赞对象ID')),
                ('like_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户ID')),
            ],
            options={
                'verbose_name': '论坛点赞',
                'verbose_name_plural': '论坛点赞',
                'db_table': 'forum_like',
            },
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('group_menber_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='成员记录id')),
                ('group_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Group', verbose_name='小组')),
                ('group_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '论坛小组成员',
                'verbose_name_plural': '论坛小组成员',
                'db_table': 'forum_group_member',
            },
        ),
        migrations.CreateModel(
            name='GroupApply',
            fields=[
                ('group_apply_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='申请id')),
                ('group_apply_message', models.CharField(max_length=500, verbose_name='附言')),
                ('group_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Group', verbose_name='申请小组')),
                ('group_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='申请用户')),
            ],
            options={
                'verbose_name': '论坛小组申请',
                'verbose_name_plural': '论坛小组申请',
                'db_table': 'forum_group_apply',
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('follow_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='关注记录ID')),
                ('follow_by_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL, verbose_name='粉丝用户ID')),
                ('follow_on_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed', to=settings.AUTH_USER_MODEL, verbose_name='被关注用户ID')),
            ],
            options={
                'verbose_name': '论坛关注',
                'verbose_name_plural': '论坛关注',
                'db_table': 'forum_follow',
            },
        ),
        migrations.CreateModel(
            name='FocusDiscuss',
            fields=[
                ('focus_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='记录ID')),
                ('focus_discuss', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Discuss', verbose_name='被关注讨论帖ID')),
                ('focus_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户ID')),
            ],
            options={
                'verbose_name': '论坛讨论贴关注',
                'verbose_name_plural': '论坛讨论贴关注',
                'db_table': 'forum_focus_discuss',
            },
        ),
        migrations.CreateModel(
            name='ExamTeacherCloud',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cloud', models.BooleanField(default=False, verbose_name='是否上传云笔记')),
                ('update_time', models.DateField(blank=True, null=True, verbose_name='云笔记上传时间')),
                ('is_read', models.BooleanField(default=False, verbose_name='是否被读取')),
                ('aid', models.ForeignKey(db_column='aid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamQuestion')),
                ('sid', models.ForeignKey(db_column='sid', on_delete=django.db.models.deletion.CASCADE, related_name='stu_id', to=settings.AUTH_USER_MODEL)),
                ('tid', models.ForeignKey(db_column='tid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '教师上传云笔记',
                'verbose_name_plural': '教师上传云笔记',
                'db_table': 'exam_teacher_cloud',
            },
        ),
        migrations.CreateModel(
            name='ExamSubjective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='题干')),
                ('answer', models.TextField(verbose_name='参考答案')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='question/subjective/', verbose_name='图片')),
                ('qid', models.ForeignKey(db_column='qid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamQuestion')),
            ],
            options={
                'verbose_name': '考试主观题',
                'verbose_name_plural': '考试主观题',
                'db_table': 'exam_subjective',
            },
        ),
        migrations.CreateModel(
            name='ExamSimple',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='题干')),
                ('choice1', models.CharField(max_length=30, verbose_name='选项1')),
                ('choice2', models.CharField(max_length=30, verbose_name='选项2')),
                ('choice3', models.CharField(max_length=30, verbose_name='选项3')),
                ('choice4', models.CharField(max_length=30, verbose_name='选项4')),
                ('answer', models.CharField(max_length=1, verbose_name='参考答案')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='question/simple/', verbose_name='图片')),
                ('qid', models.ForeignKey(db_column='qid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamQuestion')),
            ],
            options={
                'verbose_name': '考试单项选择题',
                'verbose_name_plural': '考试单项选择题',
                'db_table': 'exam_simple',
            },
        ),
        migrations.CreateModel(
            name='ExamSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_count', models.IntegerField(verbose_name='章数')),
                ('chapter', models.CharField(max_length=30, verbose_name='章名')),
                ('section_count', models.IntegerField(verbose_name='节数')),
                ('section', models.CharField(max_length=30, verbose_name='节名')),
                ('cid', models.ForeignKey(db_column='cid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamCourse')),
            ],
            options={
                'verbose_name': '考试课程章节',
                'verbose_name_plural': '考试课程章节',
                'db_table': 'exam_section',
            },
        ),
        migrations.CreateModel(
            name='ExamScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obj_score', models.IntegerField(default=0, verbose_name='客观题成绩')),
                ('sub_score', models.IntegerField(default=0, verbose_name='主观题成绩')),
                ('total_score', models.IntegerField(default=0, verbose_name='总成绩')),
                ('eid', models.ForeignKey(db_column='eid', on_delete=django.db.models.deletion.CASCADE, to='backend.Exam')),
                ('uid', models.ForeignKey(db_column='uid', on_delete=django.db.models.deletion.CASCADE, related_name='stu_score', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '考试学生成绩',
                'verbose_name_plural': '考试学生成绩',
                'db_table': 'exam_score',
            },
        ),
        migrations.CreateModel(
            name='ExamPaperScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(verbose_name='题目分值')),
                ('pid', models.ForeignKey(db_column='pid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamPaper')),
                ('qid', models.ForeignKey(db_column='qid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamQuestion')),
            ],
            options={
                'verbose_name': '试卷题目分值',
                'verbose_name_plural': '试卷题目分值',
                'db_table': 'exam_paper_score',
            },
        ),
        migrations.CreateModel(
            name='ExamMultiple',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='题干')),
                ('choice1', models.CharField(max_length=30, verbose_name='选项1')),
                ('choice2', models.CharField(max_length=30, verbose_name='选项2')),
                ('choice3', models.CharField(max_length=30, verbose_name='选项3')),
                ('choice4', models.CharField(max_length=30, verbose_name='选项4')),
                ('answer', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), size=None, verbose_name='参考答案')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='question/multiple/', verbose_name='图片')),
                ('qid', models.ForeignKey(db_column='qid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamQuestion')),
            ],
            options={
                'verbose_name': '考试多项选择题',
                'verbose_name_plural': '考试多项选择题',
                'db_table': 'exam_multiple',
            },
        ),
        migrations.CreateModel(
            name='ExamJudge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='题干')),
                ('answer', models.BooleanField(verbose_name='参考答案')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='question/judge/', verbose_name='图片')),
                ('qid', models.ForeignKey(db_column='qid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamQuestion')),
            ],
            options={
                'verbose_name': '考试判断题',
                'verbose_name_plural': '考试判断题',
                'db_table': 'exam_judge',
            },
        ),
        migrations.CreateModel(
            name='ExamBlank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='题干')),
                ('answer', models.CharField(max_length=10, verbose_name='参考答案')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='question/blank/', verbose_name='图片')),
                ('qid', models.ForeignKey(db_column='qid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamQuestion')),
            ],
            options={
                'verbose_name': '考试填空题',
                'verbose_name_plural': '考试填空题',
                'db_table': 'exam_blank',
            },
        ),
        migrations.CreateModel(
            name='ExamAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.TextField(verbose_name='答案')),
                ('score', models.IntegerField(default=0, verbose_name='得分')),
                ('is_right', models.BooleanField(blank=True, null=True, verbose_name='正确与否')),
                ('cloud', models.BooleanField(default=False, verbose_name='是否上传云笔记')),
                ('update_time', models.DateField(blank=True, null=True, verbose_name='云笔记上传时间')),
                ('is_read', models.BooleanField(default=False, verbose_name='是否被读取')),
                ('eid', models.ForeignKey(db_column='eid', on_delete=django.db.models.deletion.CASCADE, to='backend.Exam')),
                ('qid', models.ForeignKey(db_column='qid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamQuestion')),
                ('uid', models.ForeignKey(db_column='uid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '考试学生答案',
                'verbose_name_plural': '考试学生答案',
                'db_table': 'exam_answer',
            },
        ),
        migrations.AddField(
            model_name='exam',
            name='cid',
            field=models.ForeignKey(db_column='cid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamCourse'),
        ),
        migrations.AddField(
            model_name='exam',
            name='pid',
            field=models.ForeignKey(db_column='pid', on_delete=django.db.models.deletion.CASCADE, to='backend.ExamPaper'),
        ),
        migrations.AddField(
            model_name='exam',
            name='tid',
            field=models.ForeignKey(db_column='tid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DiscussReply',
            fields=[
                ('discuss_reply_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='回复id')),
                ('discuss_reply_content', models.TextField(verbose_name='回复内容')),
                ('discuss_reply_time', models.DateTimeField(verbose_name='回帖时间')),
                ('discuss_reply_discuss_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Discuss', verbose_name='回复讨论帖')),
                ('discuss_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='回复用户')),
            ],
            options={
                'verbose_name': '论坛小组回复',
                'verbose_name_plural': '论坛小组回复',
                'db_table': 'forum_discuss_reply',
            },
        ),
        migrations.AddField(
            model_name='discuss',
            name='discuss_file_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.ForumFile', verbose_name='附件id'),
        ),
        migrations.AddField(
            model_name='discuss',
            name='group_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Group', verbose_name='归属小组'),
        ),
        migrations.AddField(
            model_name='discuss',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='发布用户'),
        ),
        migrations.CreateModel(
            name='Collect',
            fields=[
                ('collect_id', models.AutoField(max_length=20, primary_key=True, serialize=False, verbose_name='收藏记录ID')),
                ('topic_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Topic', verbose_name='收藏主贴ID')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='收藏用户ID')),
            ],
            options={
                'verbose_name': '论坛收藏',
                'verbose_name_plural': '论坛收藏',
                'db_table': 'forum_collect',
            },
        ),
        migrations.CreateModel(
            name='Base_question',
            fields=[
                ('base_question_id', models.AutoField(primary_key=True, serialize=False, verbose_name='问题编号')),
                ('description', models.CharField(max_length=60, verbose_name='问题描述')),
                ('answer', models.TextField(verbose_name='参考答案')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Subject', verbose_name='类型')),
            ],
            options={
                'verbose_name': '智能问答基本问题',
                'verbose_name_plural': '智能问答基本问题',
                'db_table': 'base_question',
            },
        ),
        migrations.CreateModel(
            name='Apply_Class',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='课程名')),
                ('stime', models.DateField(null=True, verbose_name='开始日期')),
                ('time', models.IntegerField(default=0, verbose_name='课时')),
                ('maxnum', models.IntegerField(default=20, verbose_name='最大人数')),
                ('reason', models.TextField(verbose_name='申请理由')),
                ('status', models.IntegerField(default=1, verbose_name='状态')),
                ('tid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='教师id')),
            ],
            options={
                'verbose_name': '开课申请',
                'verbose_name_plural': '开课申请',
                'db_table': 'apply_class',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('answer_id', models.AutoField(primary_key=True, serialize=False, verbose_name='回答编号')),
                ('context', models.TextField(verbose_name='回答内容')),
                ('time', models.DateTimeField(verbose_name='回答时间')),
                ('score', models.IntegerField(verbose_name='评分')),
                ('status', models.IntegerField(verbose_name='是否上星')),
                ('from_forum', models.BooleanField(default=False, verbose_name='来自论坛')),
                ('upload_time', models.DateTimeField(null=True, verbose_name='上传时间')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Question', verbose_name='问题')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '智能问答回答',
                'verbose_name_plural': '智能问答回答',
                'db_table': 'answer',
            },
        ),
    ]
